Absolutely! Here's a **proper and clear documentation** of the **Todo Web App with a Node.js backend** and text file as the database.

---

# 📄 Project Documentation: Simple Todo Web App

---

## 📌 Overview

This is a **simple Todo Web Application** that allows users to:

- Add tasks
- View tasks
- Store tasks in a text file (`tasks.txt`) on the server

Built using:

- **Frontend**: HTML, Bootstrap, JavaScript
- **Backend**: Node.js with Express.js
- **Storage**: Plain text file (`tasks.txt`)

---

## 🏗 Folder Structure

```
todo-app/
│
├── server.js             # Node.js backend
├── tasks.txt             # Data storage (auto-created if not present)
└── public/
    └── index.html        # Frontend interface
```

---

## 🎯 Features

- Add tasks with:
  - Task Name
  - Description
  - Deadline
- View all saved tasks
- Backend saves data persistently in `tasks.txt`

---

## ⚙ Technologies Used

| Component   | Technology |
|-------------|------------|
| Frontend    | HTML, Bootstrap 5, Vanilla JavaScript |
| Backend     | Node.js, Express.js |
| Storage     | Text file (`tasks.txt`) |

---

## 💡 Functional Flow

### 1. **User Inputs Task**

- User fills in:
  - Task Name
  - Detailed Description
  - Deadline
- On clicking "Add Task", the data is sent to the backend using a `POST` request.

---

### 2. **Backend API - `/add-task`**

- Receives JSON data
- Formats it into human-readable form
- Appends it to `tasks.txt`
- Sends a success response back

**Example Entry in `tasks.txt`:**

```
Task: Buy Groceries
Description: Milk, Bread, Eggs
Deadline: 2025-04-21
```

---

### 3. **View Tasks - `/tasks`**

- A `GET` request to `/tasks` reads the entire file
- Sends the text content back
- Frontend displays it inside a `<pre>` tag

---

## 🔧 API Endpoints

### ✅ `POST /add-task`

**Description**: Adds a task to the `tasks.txt` file

**Request Body**:
```json
{
  "name": "Task Name",
  "desc": "Detailed Description",
  "deadline": "YYYY-MM-DD"
}
```

**Response**:
- `200 OK`: "Task saved successfully!"
- `500 Internal Server Error`: On file write failure

---

### ✅ `GET /tasks`

**Description**: Returns all stored tasks as plain text

**Response**:
- `200 OK`: Task list as string
- `500 Internal Server Error`: On file read failure

---

## 🖥 How to Run Locally

### 1. Install Node.js (if not installed)

[https://nodejs.org/](https://nodejs.org/)

### 2. Setup Project

```bash
mkdir todo-app && cd todo-app
npm init -y
npm install express
```

Create:
- `server.js`
- `public/index.html`

Copy code from previous steps.

### 3. Start Server

```bash
node server.js
```

Or with auto-reload:

```bash
npm install -g nodemon
nodemon server.js
```

Visit: [http://localhost:3000](http://localhost:3000)

---

## 📦 Backend Logic Diagram (Simplified)

```plaintext
User → [Frontend HTML Form]
         ↓
      JavaScript
         ↓
     fetch('/add-task')
         ↓
  [Node.js Express Server]
         ↓
   fs.appendFile() to tasks.txt
```

---

## 🛠 Improvements (Optional/Future)

- Use JSON instead of plain text
- Add Edit/Delete functionality
- Implement authentication
- Use a database (MongoDB, SQLite)
- Upload to cloud (e.g., Render, Railway, or VPS)

---

## 📚 Summary

| Module        | Description |
|---------------|-------------|
| Frontend      | HTML form with Bootstrap styling |
| JavaScript    | Collects form data and calls backend |
| Backend       | Express server handles storing and retrieving tasks |
| Storage       | Text file (`tasks.txt`) used as a simple database |

---

Let me know if you want this turned into a PDF or want to package the project into a downloadable ZIP. I can also help you push this to GitHub or deploy online if needed.